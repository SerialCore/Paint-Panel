using Microsoft.Graphics.Canvas;
using System;
using System.Threading.Tasks;
using Windows.Foundation;
using Windows.Storage;
using Windows.Storage.Streams;
using Windows.UI;
using Windows.UI.Xaml.Controls;

// The Collection of functions to save and open ink files or image files.

namespace Paint_Panel.Control
{
    public class FilesOperator
    {

        // the image just generated by simple InkStroke object without background
        public async static Task generatePNG(StorageFile file, InkCanvas inkCanvas)
        {
            CanvasDevice device = CanvasDevice.GetSharedDevice();
            CanvasRenderTarget renderTarget = new CanvasRenderTarget(device, (int)inkCanvas.ActualWidth, (int)inkCanvas.ActualHeight, 160);

            using (var ds = renderTarget.CreateDrawingSession())
            {
                ds.DrawInk(inkCanvas.InkPresenter.StrokeContainer.GetStrokes());
            }
            using (var fileStream = await file.OpenAsync(FileAccessMode.ReadWrite))
            {
                await renderTarget.SaveAsync(fileStream, CanvasBitmapFileFormat.Png, 1f);
            }
        }

        // the inkCanvas-size-image generated by InkStroke object and inserted image
        public async static Task generatePNG(StorageFile file, InkCanvas inkCanvas, Color color, Image back_image = null, IRandomAccessStream x = null)
        {
            CanvasDevice device = CanvasDevice.GetSharedDevice();
            //CanvasBitmap image = await CanvasBitmap.LoadAsync(device, x);
            CanvasRenderTarget renderTarget = new CanvasRenderTarget(device, (int)inkCanvas.ActualWidth, (int)inkCanvas.ActualHeight, 160);

            using (var ds = renderTarget.CreateDrawingSession())
            {
                ds.Clear(color);
                if (x != null)
                {
                    CanvasBitmap img = await CanvasBitmap.LoadAsync(renderTarget, x);
                    Rect rect = new Rect(((int)inkCanvas.ActualWidth - (int)back_image.ActualWidth) / 2,
                        ((int)inkCanvas.ActualHeight - (int)back_image.ActualHeight) / 2,
                        (int)back_image.ActualWidth,
                        (int)back_image.ActualHeight);
                    ds.DrawImage(img, rect);
                }
                ds.DrawInk(inkCanvas.InkPresenter.StrokeContainer.GetStrokes());
            }
            using (var fileStream = await file.OpenAsync(FileAccessMode.ReadWrite))
            {
                await renderTarget.SaveAsync(fileStream, CanvasBitmapFileFormat.Png, 1f);
            }
        }



        public async static Task generateJPG(StorageFile file, InkCanvas inkCanvas)
        {
            CanvasDevice device = CanvasDevice.GetSharedDevice();
            CanvasRenderTarget renderTarget = new CanvasRenderTarget(device, (int)inkCanvas.ActualWidth, (int)inkCanvas.ActualHeight, 160);

            using (var ds = renderTarget.CreateDrawingSession())
            {
                ds.DrawInk(inkCanvas.InkPresenter.StrokeContainer.GetStrokes());
            }
            using (var fileStream = await file.OpenAsync(FileAccessMode.ReadWrite))
            {
                await renderTarget.SaveAsync(fileStream, CanvasBitmapFileFormat.Jpeg, 1f);
            }
        }

        public async static Task generateJPG(StorageFile file, InkCanvas inkCanvas, Color color, Image back_image = null, IRandomAccessStream x = null)
        {
            CanvasDevice device = CanvasDevice.GetSharedDevice();
            //CanvasBitmap image = await CanvasBitmap.LoadAsync(device, x);
            CanvasRenderTarget renderTarget = new CanvasRenderTarget(device, (int)inkCanvas.ActualWidth, (int)inkCanvas.ActualHeight, 160);

            using (var ds = renderTarget.CreateDrawingSession())
            {
                ds.Clear(color);
                if (x != null)
                {
                    CanvasBitmap img = await CanvasBitmap.LoadAsync(renderTarget, x);
                    Rect rect = new Rect(((int)inkCanvas.ActualWidth - (int)back_image.ActualWidth) / 2,
                        ((int)inkCanvas.ActualHeight - (int)back_image.ActualHeight) / 2,
                        (int)back_image.ActualWidth,
                        (int)back_image.ActualHeight);
                    ds.DrawImage(img, rect);
                }
                ds.DrawInk(inkCanvas.InkPresenter.StrokeContainer.GetStrokes());
            }
            using (var fileStream = await file.OpenAsync(FileAccessMode.ReadWrite))
            {
                await renderTarget.SaveAsync(fileStream, CanvasBitmapFileFormat.Jpeg, 1f);
            }
        }

    }
}
